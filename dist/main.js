(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../irrelon-path/src/Path.js":
/*!***********************************!*\
  !*** ../irrelon-path/src/Path.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * A function that just returns the first argument.\n * @param {*} val The argument to return.\n * @returns {*} The passed argument.\n */\nconst returnWhatWasGiven = val => val;\n/**\n * Converts any key matching the wildcard to a zero.\n * @param {String} key The key to test.\n * @returns {String} The key.\n */\n\n\nconst wildcardToZero = key => {\n  return key === \"$\" ? \"0\" : key;\n};\n/**\n * If a key is a number, will return a wildcard, otherwise\n * will return the originally passed key.\n * @param {String} key The key to test.\n * @returns {String} The original key or a wildcard.\n */\n\n\nconst numberToWildcard = key => {\n  // Check if the key is a number\n  if (String(parseInt(key, 10)) === key) {\n    // The key is a number, convert to a wildcard\n    return \"$\";\n  }\n\n  return key;\n};\n/**\n * Removes leading period (.) from string and returns it.\n * @param {String} str The string to clean.\n * @returns {*} The cleaned string.\n */\n\n\nconst clean = str => {\n  if (str.substr(0, 1) === \".\") {\n    str = str.substr(1, str.length - 1);\n  }\n\n  return str;\n};\n/**\n * Splits a path by period character, taking into account\n * escaped period characters.\n * @param {String} path The path to split into an array.\n * @return {Array} The component parts of the path, split\n * by period character.\n */\n\n\nconst split = path => {\n  // Convert all \\. (escaped periods) to another character\n  // temporarily\n  const escapedPath = path.replace(/\\\\\\./g, \"[--]\");\n  const splitPath = escapedPath.split(\".\"); // Loop the split path array and convert any escaped period\n  // placeholders back to their real period characters\n\n  for (let i = 0; i < splitPath.length; i++) {\n    splitPath[i] = splitPath[i].replace(/\\[--]/g, \".\");\n  }\n\n  return splitPath;\n};\n/**\n * Escapes any periods in the passed string so they will\n * not be identified as part of a path. Useful if you have\n * a path like \"domains.www.google.com.data\" where the\n * \"www.google.com\" should not be considered part of the\n * traversal as it is actually in an object like:\n * {\n * \t\"domains\": {\n * \t\t\"www.google.com\": {\n * \t\t\t\"data\": \"foo\"\n * \t\t}\n * \t}\n * }\n * @param {String} str The string to escape periods in.\n * @return {String} The escaped string.\n */\n\n\nconst escape = str => {\n  return str.replace(/\\./g, \"\\\\.\");\n};\n/**\n * Gets a single value from the passed object and given path.\n * @param {Object} obj The object to inspect.\n * @param {String} path The path to retrieve data from.\n * @param {*=} defaultVal Optional default to return if the\n * value retrieved from the given object and path equals undefined.\n * @param {Object=} options Optional options object.\n * @returns {*} The value retrieved from the passed object at\n * the passed path.\n */\n\n\nconst get = (obj, path, defaultVal = undefined, options = {}) => {\n  let internalPath = path,\n      objPart;\n  options = {\n    \"transformRead\": returnWhatWasGiven,\n    \"transformKey\": returnWhatWasGiven,\n    \"transformWrite\": returnWhatWasGiven,\n    ...options\n  }; // No object data, return undefined\n\n  if (obj === undefined) {\n    return defaultVal;\n  } // No path string, return the base obj\n\n\n  if (!internalPath) {\n    return obj;\n  }\n\n  internalPath = clean(internalPath); // Path is not a string, throw error\n\n  if (typeof internalPath !== \"string\") {\n    throw new Error(\"Path argument must be a string\");\n  } // Path has no dot-notation, return key/value\n\n\n  if (internalPath.indexOf(\".\") === -1) {\n    return obj[internalPath];\n  }\n\n  if (typeof obj !== \"object\") {\n    return obj;\n  }\n\n  const pathParts = split(internalPath);\n  objPart = obj;\n\n  for (let i = 0; i < pathParts.length; i++) {\n    const pathPart = pathParts[i];\n    objPart = objPart[options.transformKey(pathPart)];\n\n    if (!objPart || typeof objPart !== \"object\") {\n      break;\n    }\n  }\n\n  return objPart !== undefined ? objPart : defaultVal;\n};\n/**\n * Sets a single value on the passed object and given path.\n * @param {Object} obj The object to inspect.\n * @param {String} path The path to set data on.\n * @param {*} val The value to assign to the obj at the path.\n * @param {Object=} options The options object.\n * @returns {*} Nothing.\n */\n\n\nconst set = (obj, path, val, options = {}) => {\n  let internalPath = path,\n      objPart;\n  options = {\n    \"transformRead\": returnWhatWasGiven,\n    \"transformKey\": returnWhatWasGiven,\n    \"transformWrite\": returnWhatWasGiven,\n    ...options\n  }; // No object data\n\n  if (obj === undefined) {\n    return;\n  } // No path string\n\n\n  if (!internalPath) {\n    return;\n  }\n\n  internalPath = clean(internalPath); // Path is not a string, throw error\n\n  if (typeof internalPath !== \"string\") {\n    throw new Error(\"Path argument must be a string\");\n  }\n\n  if (typeof obj !== \"object\") {\n    return;\n  } // Path has no dot-notation, set key/value\n\n\n  if (internalPath.indexOf(\".\") === -1) {\n    obj[options.transformKey(internalPath)] = val;\n    return;\n  }\n\n  const pathParts = split(internalPath);\n  objPart = obj;\n\n  for (let i = 0; i < pathParts.length; i++) {\n    const pathPart = pathParts[i];\n    const transformedPathPart = options.transformKey(pathPart);\n    const tmpPart = objPart[transformedPathPart];\n\n    if (!tmpPart || typeof objPart !== \"object\") {\n      if (i !== pathParts.length - 1) {\n        // Create an object or array on the path\n        if (String(parseInt(pathPart, 10)) === pathPart) {\n          // This is an array index\n          objPart[transformedPathPart] = [];\n        } else {\n          objPart[transformedPathPart] = {};\n        }\n\n        objPart = objPart[transformedPathPart];\n      }\n    } else {\n      objPart = tmpPart;\n    }\n\n    if (i === pathParts.length - 1) {\n      // Set value\n      objPart[transformedPathPart] = val;\n    }\n  }\n};\n/**\n * Push a value to an array on an object for the specified path.\n * @param {Object} obj The object to update.\n * @param {String} path The path to the array to push to.\n * @param {*} val The value to push to the array at the object path.\n * @returns {Object} The original object passed in \"obj\" but with\n * the array at the path specified having the newly pushed value.\n */\n\n\nconst push = (obj, path, val) => {\n  if (obj === undefined || path === undefined) {\n    return obj;\n  } // Clean the path\n\n\n  path = this.clean(path);\n  const pathParts = split(path);\n  const part = pathParts.shift();\n\n  if (pathParts.length) {\n    // Generate the path part in the object if it does not already exist\n    obj[part] = obj[part] || {}; // Recurse\n\n    push(obj[part], pathParts.join(\".\"), val);\n  } else {\n    // We have found the target array, push the value\n    obj[part] = obj[part] || [];\n\n    if (obj[part] instanceof Array) {\n      obj[part].push(val);\n    } else {\n      throw \"Cannot push to a path whose leaf node is not an array!\";\n    }\n  }\n\n  return obj;\n};\n/**\n * Given a path and an object, determines the outermost leaf node\n * that can be reached where the leaf value is not undefined.\n * @param {Object} obj The object to inspect.\n * @param {String} path The path to retrieve data from.\n * @param {Object=} options Optional options object.\n * @returns {String} The path to the furthest non-undefined value.\n */\n\n\nconst furthest = (obj, path, options = {}) => {\n  let internalPath = path,\n      objPart;\n  options = {\n    \"transformRead\": returnWhatWasGiven,\n    \"transformKey\": wildcardToZero,\n    // Any path that has a wildcard will essentially check the first array item to continue down the tree\n    \"transformWrite\": returnWhatWasGiven,\n    ...options\n  };\n  const finalPath = []; // No path string, return the base obj\n\n  if (!internalPath) {\n    return finalPath.join(\".\");\n  }\n\n  internalPath = clean(internalPath); // Path is not a string, throw error\n\n  if (typeof internalPath !== \"string\") {\n    throw new Error(\"Path argument must be a string\");\n  }\n\n  if (typeof obj !== \"object\") {\n    return finalPath.join(\".\");\n  } // Path has no dot-notation, return key/value\n\n\n  if (internalPath.indexOf(\".\") === -1) {\n    if (obj[internalPath] !== undefined) {\n      return internalPath;\n    }\n\n    return finalPath.join(\".\");\n  }\n\n  const pathParts = split(internalPath);\n  objPart = obj;\n\n  for (let i = 0; i < pathParts.length; i++) {\n    const pathPart = pathParts[i];\n    objPart = objPart[options.transformKey(pathPart)];\n\n    if (objPart === undefined) {\n      break;\n    }\n\n    finalPath.push(pathPart);\n  }\n\n  return finalPath.join(\".\");\n};\n/**\n * Traverses the object by the given path and returns an object where\n * each key is a path pointing to a leaf node and contains the value\n * from the leaf node from the overall object in the obj argument,\n * essentially providing all available paths in an object and all the\n * values for each path.\n * @param {Object} obj The object to inspect.\n * @param {String} path The path to retrieve data from.\n * @param {Object=} options Optional options object.\n * @returns {Object} The result of the traversal.\n */\n\n\nconst values = (obj, path, options = {}) => {\n  const internalPath = clean(path);\n  const pathParts = split(internalPath);\n  const currentPath = [];\n  const valueData = {};\n  options = {\n    \"transformRead\": returnWhatWasGiven,\n    \"transformKey\": returnWhatWasGiven,\n    \"transformWrite\": returnWhatWasGiven,\n    ...options\n  };\n\n  for (let i = 0; i < pathParts.length; i++) {\n    const pathPart = options.transformKey(pathParts[i]);\n    currentPath.push(pathPart);\n    const tmpPath = currentPath.join(\".\");\n    valueData[tmpPath] = get(obj, tmpPath);\n  }\n\n  return valueData;\n};\n/**\n * Takes an object and finds all paths, then returns the paths as an\n * array of strings.\n * @param {Object} obj The object to scan.\n * @param {Array=} finalObj An object used to collect the path keys.\n * (Do not pass this in directly - use undefined).\n * @param {String=} parentPath The path of the parent object. (Do not\n * pass this in directly - use undefined).\n * @param {Object=} options An options object.\n * @returns {Array<String>} An array containing path strings.\n */\n\n\nconst flatten = (obj, finalObj = [], parentPath = \"\", options = {}) => {\n  options = {\n    \"transformRead\": returnWhatWasGiven,\n    \"transformKey\": returnWhatWasGiven,\n    \"transformWrite\": returnWhatWasGiven,\n    ...options\n  };\n  const transformedObj = options.transformRead(obj);\n\n  const currentPath = i => {\n    const tKey = options.transformKey(i);\n    return parentPath ? parentPath + \".\" + tKey : tKey;\n  };\n\n  for (const i in transformedObj) {\n    if (transformedObj.hasOwnProperty(i)) {\n      if (options.ignore && options.ignore.test(i)) {\n        continue;\n      }\n\n      if (typeof transformedObj[i] === \"object\") {\n        flatten(transformedObj[i], finalObj, currentPath(i), options);\n      }\n\n      finalObj.push(currentPath(i));\n    }\n  }\n\n  return finalObj;\n};\n/**\n * Takes an object and finds all paths, then returns the paths as keys\n * and the values of each path as the values.\n * @param {Object} obj The object to scan.\n * @param {Object=} finalObj An object used to collect the path keys.\n * (Do not pass this in directly).\n * @param {String=} parentPath The path of the parent object. (Do not\n * pass this in directly).\n * @param {Object=} options An options object.\n * @returns {Object} An object containing path keys and their values.\n */\n\n\nconst flattenValues = (obj, finalObj = {}, parentPath = \"\", options = {}) => {\n  options = {\n    \"transformRead\": returnWhatWasGiven,\n    \"transformKey\": returnWhatWasGiven,\n    \"transformWrite\": returnWhatWasGiven,\n    ...options\n  };\n  const transformedObj = options.transformRead(obj);\n\n  const currentPath = i => {\n    const tKey = options.transformKey(i);\n    return parentPath ? parentPath + \".\" + tKey : tKey;\n  };\n\n  for (const i in transformedObj) {\n    if (transformedObj.hasOwnProperty(i)) {\n      if (typeof transformedObj[i] === \"object\") {\n        flattenValues(transformedObj[i], finalObj, currentPath(i), options);\n      }\n\n      finalObj[currentPath(i)] = options.transformWrite(transformedObj[i]);\n    }\n  }\n\n  return finalObj;\n};\n/**\n * Joins multiple string arguments into a path string.\n * Ignores blank or undefined path parts and also ensures\n * that each part is escaped so passing \"foo.bar\" will\n * result in an escaped version.\n * @param {Array} args The arguments passed to the function,\n * spread using ES6 spread.\n * @returns {string} A final path string.\n */\n\n\nconst join = (...args) => {\n  return args.reduce((arr, item) => {\n    if (item !== undefined && String(item)) {\n      arr.push(item);\n    }\n\n    return arr;\n  }, []).join(\".\");\n};\n/**\n * Joins multiple string arguments into a path string.\n * Ignores blank or undefined path parts and also ensures\n * that each part is escaped so passing \"foo.bar\" will\n * result in an escaped version.\n * @param {Array} args The arguments passed to the function,\n * spread using ES6 spread.\n * @returns {string} A final path string.\n */\n\n\nconst joinEscaped = (...args) => {\n  const escapedArgs = args.map(item => {\n    return escape(item);\n  });\n  return join(...escapedArgs);\n};\n/**\n * Returns the specified path but removes the last\n * leaf from the path. E.g. \"foo.bar.thing\" becomes\n * \"foo.bar\".\n * @param {String} path The path to operate on.\n * @returns {String} The new path string.\n */\n\n\nconst up = path => {\n  const parts = split(path);\n  parts.pop();\n  return parts.join(\".\");\n};\n/**\n * Counts the total number of key leaf nodes in the passed object.\n * @param {Object} obj The object to count key leaf nodes for.\n * @returns {Number} The number of keys.\n */\n\n\nconst countLeafNodes = obj => {\n  let totalKeys = 0;\n\n  for (const i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      if (obj[i] !== undefined) {\n        if (typeof obj[i] !== \"object\") {\n          totalKeys++;\n        } else {\n          totalKeys += countLeafNodes(obj[i]);\n        }\n      }\n    }\n  }\n\n  return totalKeys;\n};\n/**\n * Tests if the passed object has the paths that are specified and that\n * a value exists in those paths.\n * @param {Object} testKeys The object describing the paths to test for.\n * @param {Object} testObj The object to test paths against.\n * @returns {Boolean} True if the object paths exist.\n */\n\n\nconst hasMatchingPathsInObject = function (testKeys, testObj) {\n  let result = true;\n\n  for (const i in testKeys) {\n    if (testKeys.hasOwnProperty(i)) {\n      if (testObj[i] === undefined) {\n        return false;\n      }\n\n      if (typeof testKeys[i] === \"object\") {\n        // Recurse object\n        result = hasMatchingPathsInObject(testKeys[i], testObj[i]); // Should we exit early?\n\n        if (!result) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return result;\n};\n/**\n * Tests if the passed object has the paths that are specified and that\n * a value exists in those paths and if so returns the number matched.\n * @param {Object} testKeys The object describing the paths to test for.\n * @param {Object} testObj The object to test paths against.\n * @returns {Object<matchedKeys<Number>, matchedKeyCount<Number>, totalKeyCount<Number>>} Stats on the matched keys.\n */\n\n\nconst countMatchingPathsInObject = (testKeys, testObj) => {\n  const matchedKeys = {};\n  let matchData,\n      matchedKeyCount = 0,\n      totalKeyCount = 0;\n\n  for (const i in testObj) {\n    if (testObj.hasOwnProperty(i)) {\n      if (typeof testObj[i] === \"object\") {\n        // The test / query object key is an object, recurse\n        matchData = countMatchingPathsInObject(testKeys[i], testObj[i]);\n        matchedKeys[i] = matchData.matchedKeys;\n        totalKeyCount += matchData.totalKeyCount;\n        matchedKeyCount += matchData.matchedKeyCount;\n      } else {\n        // The test / query object has a property that is not an object so add it as a key\n        totalKeyCount++; // Check if the test keys also have this key and it is also not an object\n\n        if (testKeys && testKeys[i] && typeof testKeys[i] !== \"object\") {\n          matchedKeys[i] = true;\n          matchedKeyCount++;\n        } else {\n          matchedKeys[i] = false;\n        }\n      }\n    }\n  }\n\n  return {\n    matchedKeys,\n    matchedKeyCount,\n    totalKeyCount\n  };\n};\n\nmodule.exports = {\n  wildcardToZero,\n  numberToWildcard,\n  clean,\n  split,\n  escape,\n  get,\n  set,\n  push,\n  furthest,\n  values,\n  flatten,\n  flattenValues,\n  join,\n  joinEscaped,\n  up,\n  countLeafNodes,\n  hasMatchingPathsInObject,\n  countMatchingPathsInObject\n};\n\n//# sourceURL=webpack:///../irrelon-path/src/Path.js?");

/***/ }),

/***/ "./node_modules/irrelon-emitter/lib/Emitter.js":
/*!*****************************************************!*\
  !*** ./node_modules/irrelon-emitter/lib/Emitter.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\n The MIT License (MIT)\n\n Copyright (c) 2014 Irrelon Software Limited\n http://www.irrelon.com\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice, url and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n\n Source: https://github.com/irrelon/emitter\n\n Changelog:\n \tVersion 2.0.11:\n \t\tAdded cancelStatic method to allow cancelling a static event\n \tVersion 2.0.7:\n \t\tFixed UMD module support\n \tVersion 2.0.6:\n \t\tAdded UMD module support\n \tVersion 2.0.5:\n \t\tAdded bower version number\n \tVersion 2.0.4:\n \t\tAllow instantiation as independent instance, updated unit tests\n \tVersion 2.0.3:\n \t\tDocumentation updates, published to bower\n \tVersion 2.0.2:\n \t\tDocumentation updates\n \tVersion 2.0.1:\n \t\tBug fix in this._emitters usage\n \tVersion 2.0.0:\n \t\tBig update to bring in line with latest developments in other projects. Event emitter can\n \t\tnow use deferEmit(), emitId(), emitStatic(), emitStaticId(), willEmit(), willEmitId().\n \tVersion 1.1.9:\n \t\tUpdated changelog correctly\n \tVersion 1.1.8:\n \t\tRemoved tons of dependencies wrongly included in main dependencies, have moved to devDependencies section of package.json\n \tVersion 1.1.0:\n \t\tAdded support for overloaded methods\n \t\tAdded support for events with ids\n \tVersion 1.0.2:\n \t\tRemoved AMD support, added browserify support\n \t\tAdded package.json\n \t\tAdded once() method\n \t\tAdded hasListener() method\n \t\tPublished to NPM as irrelon-emitter\n \tVersion 1.0.1:\n \t\tAdded ability to extend any object with eventing capability\n \t\tAdded AMD / Require.js support\n\t\t Added Node.js support\n\tVersion 1.0.0:\n\t\tFirst commit\n */\n\n\nvar Overload = __webpack_require__(/*! irrelon-overload */ \"./node_modules/irrelon-overload/Overload.js\");\n\nvar EventMethods = {\n\ton: new Overload({\n\t\t/**\n\t\t * Attach an event listener to the passed event.\n\t\t * @memberof Emitter\n\t\t * @method on\n\t\t * @param {String} event The name of the event to listen for.\n\t\t * @param {Function} listener The method to call when the event is fired.\n\t\t */\n\t\t'string, function': function (event, listener) {\n\t\t\treturn this.$main(event, '*', listener);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Attach an event listener to the passed event only if the passed\n\t\t * id matches the document id for the event being fired.\n\t\t * @memberof Emitter\n\t\t * @method on\n\t\t * @param {String} event The name of the event to listen for.\n\t\t * @param {*} id The document id to match against.\n\t\t * @param {Function} listener The method to call when the event is fired.\n\t\t */\n\t\t'string, *, function': function (event, id, listener) {\n\t\t\treturn this.$main(event, id, listener);\n\t\t},\n\t\t\n\t\t/**\n\t\t * @param event\n\t\t * @param id\n\t\t * @param listener\n\t\t * @return {$main}\n\t\t * @private\n\t\t */\n\t\t'$main': function (event, id, listener) {\n\t\t\tvar self = this,\n\t\t\t\tgenerateTimeout,\n\t\t\t\temitter,\n\t\t\t\ti;\n\t\t\t\n\t\t\tgenerateTimeout = function (emitter) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tlistener.apply(self, emitter.args);\n\t\t\t\t}, 1);\n\t\t\t};\n\t\t\t\n\t\t\tthis._listeners = this._listeners || {};\n\t\t\tthis._listeners[event] = this._listeners[event] || {};\n\t\t\tthis._listeners[event][id] = this._listeners[event][id] || [];\n\t\t\tthis._listeners[event][id].push(listener);\n\t\t\t\n\t\t\t// Check for any static emitters, and fire the event if any exist\n\t\t\tif (this._emitters && this._emitters[event] && this._emitters[event].length) {\n\t\t\t\t// Emit events for each emitter\n\t\t\t\tfor (i = 0; i < this._emitters[event].length; i++) {\n\t\t\t\t\temitter = this._emitters[event];\n\t\t\t\t\t\n\t\t\t\t\tif (id === '*' || emitter.id === id) {\n\t\t\t\t\t\t// Call the listener out of process so that any code that expects a listener\n\t\t\t\t\t\t// to be called at some point in the future rather than immediately on registration\n\t\t\t\t\t\t// will not fail\n\t\t\t\t\t\tgenerateTimeout(emitter);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\t\t}\n\t}),\n\t\n\tonce: new Overload({\n\t\t/**\n\t\t * Attach an event listener to the passed event which will only fire once.\n\t\t * @memberof Emitter\n\t\t * @method once\n\t\t * @param {String} event The name of the event to listen for.\n\t\t * @param {Function} listener The method to call when the event is fired.\n\t\t */\n\t\t'string, function': function (event, listener) {\n\t\t\tvar self = this,\n\t\t\t\tfired = false,\n\t\t\t\tinternalCallback = function () {\n\t\t\t\t\tif (!fired) {\n\t\t\t\t\t\tfired = true;\n\t\t\t\t\t\tself.off(event, internalCallback);\n\t\t\t\t\t\tlistener.apply(self, arguments);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\n\t\t\treturn this.on(event, internalCallback);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Attach an event listener to the passed event only if the passed\n\t\t * id matches the document id for the event being fired.\n\t\t * @memberof Emitter\n\t\t * @method once\n\t\t * @param {String} event The name of the event to listen for.\n\t\t * @param {*} id The document id to match against.\n\t\t * @param {Function} listener The method to call when the event is fired.\n\t\t */\n\t\t'string, *, function': function (event, id, listener) {\n\t\t\tvar self = this,\n\t\t\t\tfired = false,\n\t\t\t\tinternalCallback = function () {\n\t\t\t\t\tif (!fired) {\n\t\t\t\t\t\tfired = true;\n\t\t\t\t\t\tself.off(event, id, internalCallback);\n\t\t\t\t\t\tlistener.apply(self, arguments);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\n\t\t\treturn this.on(event, id, internalCallback);\n\t\t}\n\t}),\n\t\n\toff: new Overload({\n\t\t/**\n\t\t * Cancels all event listeners for the passed event.\n\t\t * @memberof Emitter\n\t\t * @method off\n\t\t * @param {String} event The name of the event.\n\t\t * @returns {*}\n\t\t */\n\t\t'string': function (event) {\n\t\t\tvar self = this;\n\t\t\t\n\t\t\tif (this._emitting) {\n\t\t\t\tthis._eventRemovalQueue = this._eventRemovalQueue || [];\n\t\t\t\tthis._eventRemovalQueue.push(function () {\n\t\t\t\t\tself.off(event);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (this._listeners && this._listeners[event]) {\n\t\t\t\t\tdelete this._listeners[event];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Cancels the event listener for the passed event and listener function.\n\t\t * @memberof Emitter\n\t\t * @method off\n\t\t * @param {String} event The event to cancel listener for.\n\t\t * @param {Function} listener The event listener function used in the on()\n\t\t * or once() call to cancel.\n\t\t * @returns {*}\n\t\t */\n\t\t'string, function': function (event, listener) {\n\t\t\tvar self = this,\n\t\t\t\tarr,\n\t\t\t\tindex;\n\t\t\t\n\t\t\tif (this._emitting) {\n\t\t\t\tthis._eventRemovalQueue = this._eventRemovalQueue || [];\n\t\t\t\tthis._eventRemovalQueue.push(function () {\n\t\t\t\t\tself.off(event, listener);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (typeof(listener) === 'string') {\n\t\t\t\t\tif (this._listeners && this._listeners[event] && this._listeners[event][listener]) {\n\t\t\t\t\t\tdelete this._listeners[event][listener];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this._listeners && this._listeners[event]) {\n\t\t\t\t\t\tarr = this._listeners[event]['*'];\n\t\t\t\t\t\tindex = arr.indexOf(listener);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\t\tarr.splice(index, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Cancels an event listener based on an event name, id and listener function.\n\t\t * @memberof Emitter\n\t\t * @method off\n\t\t * @param {String} event The event to cancel listener for.\n\t\t * @param {String} id The ID of the event to cancel listening for.\n\t\t * @param {Function} listener The event listener function used in the on()\n\t\t * or once() call to cancel.\n\t\t */\n\t\t'string, *, function': function (event, id, listener) {\n\t\t\tvar self = this;\n\t\t\t\n\t\t\tif (this._emitting) {\n\t\t\t\tthis._eventRemovalQueue = this._eventRemovalQueue || [];\n\t\t\t\tthis._eventRemovalQueue.push(function () {\n\t\t\t\t\tself.off(event, id, listener);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (this._listeners && this._listeners[event] && this._listeners[event][id]) {\n\t\t\t\t\tvar arr = this._listeners[event][id],\n\t\t\t\t\t\tindex = arr.indexOf(listener);\n\t\t\t\t\t\n\t\t\t\t\tif (index > -1) {\n\t\t\t\t\t\tarr.splice(index, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\t/**\n\t\t * Cancels all listeners for an event based on the passed event name and id.\n\t\t * @memberof Emitter\n\t\t * @method off\n\t\t * @param {String} event The event name to cancel listeners for.\n\t\t * @param {*} id The ID to cancel all listeners for.\n\t\t */\n\t\t'string, *': function (event, id) {\n\t\t\tvar self = this;\n\t\t\t\n\t\t\tif (this._emitting) {\n\t\t\t\tthis._eventRemovalQueue = this._eventRemovalQueue || [];\n\t\t\t\tthis._eventRemovalQueue.push(function () {\n\t\t\t\t\tself.off(event, id);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (this._listeners && this._listeners[event] && this._listeners[event][id]) {\n\t\t\t\t\t// Kill all listeners for this event id\n\t\t\t\t\tdelete this._listeners[event][id];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}),\n\t\n\temit: new Overload({\n\t\t/**\n\t\t * Emit an event.\n\t\t * @memberof Emitter\n\t\t * @method emit\n\t\t * @param {String} event The event to emit.\n\t\t * @returns {*}\n\t\t */\n\t\t'string': function (event) {\n\t\t\t// Fire global listeners\n\t\t\treturn this.$main(event);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Emit an event with data.\n\t\t * @memberof Emitter\n\t\t * @method emit\n\t\t * @param {String} event The event to emit.\n\t\t * @param {*} data Data to emit with the event.\n\t\t * @returns {*}\n\t\t */\n\t\t'string, ...': function (event, data) {\n\t\t\t// Fire global listeners first\n\t\t\tthis.$main.apply(this, arguments);\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Handles emitting events, is an internal method not called directly.\n\t\t * @param {String} event The name of the event to emit.\n\t\t * @param {*} data The data to emit with the event.\n\t\t * @returns {*}\n\t\t * @private\n\t\t */\n\t\t'$main': function (event, data) {\n\t\t\tvar id = '*';\n\t\t\tthis._listeners = this._listeners || {};\n\t\t\tthis._emitting = true;\n\t\t\t\n\t\t\tif (this._listeners[event]) {\n\t\t\t\tvar arrIndex,\n\t\t\t\t\tarrCount,\n\t\t\t\t\ttmpFunc,\n\t\t\t\t\tarr;\n\t\t\t\t\n\t\t\t\t// Handle global emit\n\t\t\t\tif (this._listeners[event][id]) {\n\t\t\t\t\tarr = this._listeners[event][id];\n\t\t\t\t\tarrCount = arr.length;\n\t\t\t\t\t\n\t\t\t\t\tfor (arrIndex = 0; arrIndex < arrCount; arrIndex++) {\n\t\t\t\t\t\t// Check we have a function to execute\n\t\t\t\t\t\ttmpFunc = arr[arrIndex];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (typeof tmpFunc === 'function') {\n\t\t\t\t\t\t\ttmpFunc.apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis._emitting = false;\n\t\t\tthis._processRemovalQueue();\n\t\t\t\n\t\t\treturn this;\n\t\t}\n\t}),\n\t\n\temitId: new Overload({\n\t\t'string': function (event) {\n\t\t\tthrow('Missing id from emitId call!');\n\t\t},\n\t\t\n\t\t'string, *': function (event, id) {\n\t\t\treturn this.$main(event, id);\n\t\t},\n\t\t\n\t\t'string, *, ...': function (event, id) {\n\t\t\t// Fire global listeners first\n\t\t\tthis.$main.apply(this, arguments);\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t'$main': function (event, id, data) {\n\t\t\tthis._listeners = this._listeners || {};\n\t\t\tthis._emitting = true;\n\t\t\t\n\t\t\tif (this._listeners[event]) {\n\t\t\t\tvar arrIndex,\n\t\t\t\t\tarrCount,\n\t\t\t\t\ttmpFunc,\n\t\t\t\t\tarr;\n\t\t\t\t\n\t\t\t\t// Handle global emit\n\t\t\t\tif (this._listeners[event]['*']) {\n\t\t\t\t\tarr = this._listeners[event]['*'];\n\t\t\t\t\tarrCount = arr.length;\n\t\t\t\t\t\n\t\t\t\t\tfor (arrIndex = 0; arrIndex < arrCount; arrIndex++) {\n\t\t\t\t\t\t// Check we have a function to execute\n\t\t\t\t\t\ttmpFunc = arr[arrIndex];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (typeof tmpFunc === 'function') {\n\t\t\t\t\t\t\ttmpFunc.apply(this, Array.prototype.slice.call(arguments, 2));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Handle id emit\n\t\t\t\tif (this._listeners[event][id]) {\n\t\t\t\t\tarr = this._listeners[event][id];\n\t\t\t\t\tarrCount = arr.length;\n\t\t\t\t\t\n\t\t\t\t\tfor (arrIndex = 0; arrIndex < arrCount; arrIndex++) {\n\t\t\t\t\t\t// Check we have a function to execute\n\t\t\t\t\t\ttmpFunc = arr[arrIndex];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (typeof tmpFunc === 'function') {\n\t\t\t\t\t\t\ttmpFunc.apply(this, Array.prototype.slice.call(arguments, 2));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis._emitting = false;\n\t\t\tthis._processRemovalQueue();\n\t\t\t\n\t\t\treturn this;\n\t\t}\n\t}),\n\t\n\temitStatic: new Overload({\n\t\t/**\n\t\t * Emit an event that will fire on listeners even when the listener\n\t\t * is registered AFTER the event has been emitted.\n\t\t * @memberof Emitter\n\t\t * @method emitStatic\n\t\t * @param {String} event The event to emit.\n\t\t * @returns {*}\n\t\t */\n\t\t'string': function (event) {\n\t\t\t// Fire global listeners\n\t\t\treturn this.$main(event);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Emit an event with data that will fire on listeners even when the listener\n\t\t * is registered AFTER the event has been emitted.\n\t\t * @memberof Emitter\n\t\t * @method emitStatic\n\t\t * @param {String} event The event to emit.\n\t\t * @param {*} data Data to emit with the event.\n\t\t * @returns {*}\n\t\t */\n\t\t'string, ...': function (event, data) {\n\t\t\t// Fire global listeners first\n\t\t\tthis.$main.apply(this, arguments);\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Handles emitting events, is an internal method not called directly.\n\t\t * @param {String} event The name of the event to emit.\n\t\t * @param {*} data The data to emit with the event.\n\t\t * @returns {*}\n\t\t * @private\n\t\t */\n\t\t'$main': function (event, data) {\n\t\t\tvar id = '*';\n\t\t\tthis._listeners = this._listeners || {};\n\t\t\tthis._emitting = true;\n\t\t\t\n\t\t\tif (this._listeners[event]) {\n\t\t\t\tvar arrIndex,\n\t\t\t\t\tarrCount,\n\t\t\t\t\ttmpFunc,\n\t\t\t\t\tarr;\n\t\t\t\t\n\t\t\t\t// Handle global emit\n\t\t\t\tif (this._listeners[event][id]) {\n\t\t\t\t\tarr = this._listeners[event][id];\n\t\t\t\t\tarrCount = arr.length;\n\t\t\t\t\t\n\t\t\t\t\tfor (arrIndex = 0; arrIndex < arrCount; arrIndex++) {\n\t\t\t\t\t\t// Check we have a function to execute\n\t\t\t\t\t\ttmpFunc = arr[arrIndex];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (typeof tmpFunc === 'function') {\n\t\t\t\t\t\t\ttmpFunc.apply(this, Array.prototype.slice.call(arguments, 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis._emitting = false;\n\t\t\t\n\t\t\tthis._emitters = this._emitters || {};\n\t\t\tthis._emitters[event] = this._emitters[event] || [];\n\t\t\tthis._emitters[event].push({\n\t\t\t\tid: '*',\n\t\t\t\targs: Array.prototype.slice.call(arguments, 1)\n\t\t\t});\n\t\t\t\n\t\t\tthis._processRemovalQueue();\n\t\t\t\n\t\t\treturn this;\n\t\t}\n\t}),\n\t\n\temitStaticId: new Overload({\n\t\t/**\n\t\t * Require an id to emit.\n\t\t * @memberof Emitter\n\t\t * @method emitStaticId\n\t\t * @param event\n\t\t */\n\t\t'string': function (event) {\n\t\t\tthrow('Missing id from emitId call!');\n\t\t},\n\t\t\n\t\t/**\n\t\t * Emit an event that will fire on listeners even when the listener\n\t\t * is registered AFTER the event has been emitted.\n\t\t * @memberof Emitter\n\t\t * @method emitStaticId\n\t\t * @param {String} event The event to emit.\n\t\t * @param {String} id The id of the event to emit.\n\t\t * @returns {*}\n\t\t */\n\t\t'string, *': function (event, id) {\n\t\t\treturn this.$main(event, id);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Emit an event that will fire on listeners even when the listener\n\t\t * is registered AFTER the event has been emitted.\n\t\t * @memberof Emitter\n\t\t * @method emitStaticId\n\t\t * @param {String} event The event to emit.\n\t\t * @param {String} id The id of the event to emit.\n\t\t * @param {*=} data The data to emit with the event.\n\t\t * @returns {*}\n\t\t */\n\t\t'string, *, ...': function (event, id, data) {\n\t\t\t// Fire global listeners first\n\t\t\tthis.$main.apply(this, arguments);\n\t\t\t\n\t\t\treturn this;\n\t\t},\n\t\t\n\t\t/**\n\t\t * Handles emitting events, is an internal method not called directly.\n\t\t * @param {String} event The name of the event to emit.\n\t\t * @param {String} id The id of the event to emit.\n\t\t * @param {*} data The data to emit with the event.\n\t\t * @returns {*}\n\t\t * @private\n\t\t */\n\t\t'$main': function (event, id, data) {\n\t\t\tthis._listeners = this._listeners || {};\n\t\t\tthis._emitting = true;\n\t\t\t\n\t\t\tif (this._listeners[event]) {\n\t\t\t\tvar arrIndex,\n\t\t\t\t\tarrCount,\n\t\t\t\t\ttmpFunc,\n\t\t\t\t\tarr;\n\t\t\t\t\n\t\t\t\t// Handle global emit\n\t\t\t\tif (this._listeners[event]['*']) {\n\t\t\t\t\tarr = this._listeners[event]['*'];\n\t\t\t\t\tarrCount = arr.length;\n\t\t\t\t\t\n\t\t\t\t\tfor (arrIndex = 0; arrIndex < arrCount; arrIndex++) {\n\t\t\t\t\t\t// Check we have a function to execute\n\t\t\t\t\t\ttmpFunc = arr[arrIndex];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (typeof tmpFunc === 'function') {\n\t\t\t\t\t\t\ttmpFunc.apply(this, Array.prototype.slice.call(arguments, 2));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Handle id emit\n\t\t\t\tif (this._listeners[event][id]) {\n\t\t\t\t\tarr = this._listeners[event][id];\n\t\t\t\t\tarrCount = arr.length;\n\t\t\t\t\t\n\t\t\t\t\tfor (arrIndex = 0; arrIndex < arrCount; arrIndex++) {\n\t\t\t\t\t\t// Check we have a function to execute\n\t\t\t\t\t\ttmpFunc = arr[arrIndex];\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (typeof tmpFunc === 'function') {\n\t\t\t\t\t\t\ttmpFunc.apply(this, Array.prototype.slice.call(arguments, 2));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis._emitting = false;\n\t\t\t\n\t\t\tthis._emitters = this._emitters || {};\n\t\t\tthis._emitters[event] = this._emitters[event] || [];\n\t\t\tthis._emitters[event].push({\n\t\t\t\tid: id,\n\t\t\t\targs: Array.prototype.slice.call(arguments, 2)\n\t\t\t});\n\t\t\t\n\t\t\tthis._processRemovalQueue();\n\t\t\t\n\t\t\treturn this;\n\t\t}\n\t}),\n\t\n\tcancelStatic: new Overload({\n\t\t/**\n\t\t * Remove a static event emitter.\n\t\t * @memberof Emitter\n\t\t * @method emitStatic\n\t\t * @param {String} event The event to remove static emitter for.\n\t\t * @returns {*}\n\t\t */\n\t\t'string': function (event) {\n\t\t\t// Fire global listeners\n\t\t\treturn this.$main(event);\n\t\t},\n\t\t\n\t\t/**\n\t\t * Handles removing emitters, is an internal method not called directly.\n\t\t * @param {String} event The event to remove static emitter for.\n\t\t * @returns {*}\n\t\t * @private\n\t\t */\n\t\t'$main': function (event) {\n\t\t\tthis._emitters = this._emitters || {};\n\t\t\tthis._emitters[event] = [];\n\t\t\t\n\t\t\treturn this;\n\t\t}\n\t}),\n\t\n\t/**\n\t * Checks if an event has any event listeners or not.\n\t * @memberof Emitter\n\t * @method willEmit\n\t * @param {String} event The name of the event to check for.\n\t * @returns {boolean} True if one or more event listeners are registered for\n\t * the event. False if none are found.\n\t */\n\twillEmit: function (event) {\n\t\tvar id = '*';\n\t\t\n\t\tif (this._listeners && this._listeners[event]) {\n\t\t\tvar arrIndex,\n\t\t\t\tarrCount,\n\t\t\t\ttmpFunc,\n\t\t\t\tarr;\n\t\t\t\n\t\t\t// Handle global emit\n\t\t\tif (this._listeners[event][id]) {\n\t\t\t\tarr = this._listeners[event][id];\n\t\t\t\tarrCount = arr.length;\n\t\t\t\t\n\t\t\t\tfor (arrIndex = 0; arrIndex < arrCount; arrIndex++) {\n\t\t\t\t\t// Check we have a function to execute\n\t\t\t\t\ttmpFunc = arr[arrIndex];\n\t\t\t\t\t\n\t\t\t\t\tif (typeof tmpFunc === 'function') {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\t/**\n\t * Checks if an event has any event listeners or not based on the passed id.\n\t * @memberof Emitter\n\t * @method willEmitId\n\t * @param {String} event The name of the event to check for.\n\t * @param {String} id The event ID to check for.\n\t * @returns {boolean} True if one or more event listeners are registered for\n\t * the event. False if none are found.\n\t */\n\twillEmitId: function (event, id) {\n\t\tif (this._listeners && this._listeners[event]) {\n\t\t\tvar arrIndex,\n\t\t\t\tarrCount,\n\t\t\t\ttmpFunc,\n\t\t\t\tarr;\n\t\t\t\n\t\t\t// Handle global emit\n\t\t\tif (this._listeners[event]['*']) {\n\t\t\t\tarr = this._listeners[event]['*'];\n\t\t\t\tarrCount = arr.length;\n\t\t\t\t\n\t\t\t\tfor (arrIndex = 0; arrIndex < arrCount; arrIndex++) {\n\t\t\t\t\t// Check we have a function to execute\n\t\t\t\t\ttmpFunc = arr[arrIndex];\n\t\t\t\t\t\n\t\t\t\t\tif (typeof tmpFunc === 'function') {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Handle id emit\n\t\t\tif (this._listeners[event][id]) {\n\t\t\t\tarr = this._listeners[event][id];\n\t\t\t\tarrCount = arr.length;\n\t\t\t\t\n\t\t\t\tfor (arrIndex = 0; arrIndex < arrCount; arrIndex++) {\n\t\t\t\t\t// Check we have a function to execute\n\t\t\t\t\ttmpFunc = arr[arrIndex];\n\t\t\t\t\t\n\t\t\t\t\tif (typeof tmpFunc === 'function') {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t},\n\t\n\t/**\n\t * If events are cleared with the off() method while the event emitter is\n\t * actively processing any events then the off() calls get added to a\n\t * queue to be executed after the event emitter is finished. This stops\n\t * errors that might occur by potentially modifying the event queue while\n\t * the emitter is running through them. This method is called after the\n\t * event emitter is finished processing.\n\t * @private\n\t */\n\t_processRemovalQueue: function () {\n\t\tvar i;\n\t\t\n\t\tif (this._eventRemovalQueue && this._eventRemovalQueue.length) {\n\t\t\t// Execute each removal call\n\t\t\tfor (i = 0; i < this._eventRemovalQueue.length; i++) {\n\t\t\t\tthis._eventRemovalQueue[i]();\n\t\t\t}\n\t\t\t\n\t\t\t// Clear the removal queue\n\t\t\tthis._eventRemovalQueue = [];\n\t\t}\n\t},\n\t\n\t/**\n\t * Queues an event to be fired. This has automatic de-bouncing so that any\n\t * events of the same type that occur within 100 milliseconds of a previous\n\t * one will all be wrapped into a single emit rather than emitting tons of\n\t * events for lots of chained inserts etc. Only the data from the last\n\t * de-bounced event will be emitted.\n\t * @memberof Emitter\n\t * @method deferEmit\n\t * @param {String} eventName The name of the event to emit.\n\t * @param {*=} data Optional data to emit with the event.\n\t */\n\tdeferEmit: function (eventName, data) {\n\t\tvar self = this,\n\t\t\targs;\n\t\t\n\t\tif (!this._noEmitDefer && (!this._db || (this._db && !this._db._noEmitDefer))) {\n\t\t\targs = arguments;\n\t\t\t\n\t\t\t// Check for an existing timeout\n\t\t\tthis._deferTimeout = this._deferTimeout || {};\n\t\t\tif (this._deferTimeout[eventName]) {\n\t\t\t\tclearTimeout(this._deferTimeout[eventName]);\n\t\t\t}\n\t\t\t\n\t\t\t// Set a timeout\n\t\t\tthis._deferTimeout[eventName] = setTimeout(function () {\n\t\t\t\tself.emit.apply(self, args);\n\t\t\t}, 1);\n\t\t} else {\n\t\t\tthis.emit.apply(this, arguments);\n\t\t}\n\t\t\n\t\treturn this;\n\t}\n};\n\n/**\n * @class Emitter\n * @param obj\n * @param {Boolean} prototypeMode Defaults to true. Set to true to add emitter\n * methods to the the passed object's prototype property e.g. obj.prototype.on\n * = emitter.on. Set to false to add emitter methods the object directly e.g.\n * obj.on = emitter.on.\n * @constructor\n */\nvar Emitter = function (obj, prototypeMode) {\n\tvar operateOnObject;\n\t\n\tif (obj === undefined && prototypeMode === undefined) {\n\t\tobj = {};\n\t\tprototypeMode = false;\n\t}\n\t\n\tif (typeof obj === 'boolean' && prototypeMode === undefined) {\n\t\tprototypeMode = obj;\n\t\tobj = {};\n\t}\n\t\n\tif (prototypeMode === undefined) {\n\t\tprototypeMode = true;\n\t}\n\t\n\tif (typeof obj !== 'object' && typeof obj !== 'function') {\n\t\tthrow new Error('Cannot operate on a non-object / non-function passed as first argument!');\n\t}\n\t\n\tif (prototypeMode) {\n\t\tif (obj.prototype === undefined) {\n\t\t\tthrow new Error('Cannot modify prototype of passed object, it has no prototype property! Was it instantiated with the new operator correctly?');\n\t\t}\n\t\t\n\t\toperateOnObject = obj.prototype;\n\t} else {\n\t\toperateOnObject = obj;\n\t}\n\t\n\t// Convert the object prototype to have eventing capability\n\toperateOnObject.on = EventMethods.on;\n\toperateOnObject.off = EventMethods.off;\n\toperateOnObject.once = EventMethods.once;\n\toperateOnObject.emit = EventMethods.emit;\n\toperateOnObject.emitId = EventMethods.emitId;\n\toperateOnObject.emitStatic = EventMethods.emitStatic;\n\toperateOnObject.emitStaticId = EventMethods.emitStaticId;\n\toperateOnObject.cancelStatic = EventMethods.cancelStatic;\n\toperateOnObject.deferEmit = EventMethods.deferEmit;\n\toperateOnObject.willEmit = EventMethods.willEmit;\n\toperateOnObject.willEmitId = EventMethods.willEmitId;\n\toperateOnObject._processRemovalQueue = EventMethods._processRemovalQueue;\n\t\n\treturn obj;\n};\n\nEmitter.prototype = EventMethods;\n\nmodule.exports = Emitter;\n\n//# sourceURL=webpack:///./node_modules/irrelon-emitter/lib/Emitter.js?");

/***/ }),

/***/ "./node_modules/irrelon-overload/Overload.js":
/*!***************************************************!*\
  !*** ./node_modules/irrelon-overload/Overload.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Allows a method to accept overloaded calls with different parameters controlling\n * which passed overload function is called.\n * @param {Object} def\n * @returns {Function}\n * @constructor\n */\nvar Overload = function (def) {\n\tif (def) {\n\t\tvar self = this,\n\t\t\tindex,\n\t\t\tcount,\n\t\t\ttmpDef,\n\t\t\tdefNewKey,\n\t\t\tsigIndex,\n\t\t\tsignatures;\n\n\t\tif (!(def instanceof Array)) {\n\t\t\ttmpDef = {};\n\n\t\t\t// Def is an object, make sure all prop names are devoid of spaces\n\t\t\tfor (index in def) {\n\t\t\t\tif (def.hasOwnProperty(index)) {\n\t\t\t\t\tdefNewKey = index.replace(/ /g, '');\n\n\t\t\t\t\t// Check if the definition array has a * string in it\n\t\t\t\t\tif (defNewKey.indexOf('*') === -1) {\n\t\t\t\t\t\t// No * found\n\t\t\t\t\t\ttmpDef[defNewKey] = def[index];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// A * was found, generate the different signatures that this\n\t\t\t\t\t\t// definition could represent\n\t\t\t\t\t\tsignatures = this.generateSignaturePermutations(defNewKey);\n\n\t\t\t\t\t\tfor (sigIndex = 0; sigIndex < signatures.length; sigIndex++) {\n\t\t\t\t\t\t\tif (!tmpDef[signatures[sigIndex]]) {\n\t\t\t\t\t\t\t\ttmpDef[signatures[sigIndex]] = def[index];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdef = tmpDef;\n\t\t}\n\n\t\treturn function () {\n\t\t\tvar arr = [],\n\t\t\t\tlookup,\n\t\t\t\ttype;\n\n\t\t\t// Check if we are being passed a key/function object or an array of functions\n\t\t\tif (def instanceof Array) {\n\t\t\t\t// We were passed an array of functions\n\t\t\t\tcount = def.length;\n\t\t\t\tfor (index = 0; index < count; index++) {\n\t\t\t\t\tif (def[index].length === arguments.length) {\n\t\t\t\t\t\treturn self.callExtend(this, '$main', def, def[index], arguments);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generate lookup key from arguments\n\t\t\t\t// Copy arguments to an array\n\t\t\t\tfor (index = 0; index < arguments.length; index++) {\n\t\t\t\t\ttype = typeof arguments[index];\n\n\t\t\t\t\t// Handle detecting arrays\n\t\t\t\t\tif (type === 'object' && arguments[index] instanceof Array) {\n\t\t\t\t\t\ttype = 'array';\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle been presented with a single undefined argument\n\t\t\t\t\tif (arguments.length === 1 && type === 'undefined') {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add the type to the argument types array\n\t\t\t\t\tarr.push(type);\n\t\t\t\t}\n\n\t\t\t\tlookup = arr.join(',');\n\n\t\t\t\t// Check for an exact lookup match\n\t\t\t\tif (def[lookup]) {\n\t\t\t\t\treturn self.callExtend(this, '$main', def, def[lookup], arguments);\n\t\t\t\t} else {\n\t\t\t\t\tfor (index = arr.length; index >= 0; index--) {\n\t\t\t\t\t\t// Get the closest match\n\t\t\t\t\t\tlookup = arr.slice(0, index).join(',');\n\n\t\t\t\t\t\tif (def[lookup + ',...']) {\n\t\t\t\t\t\t\t// Matched against arguments + \"any other\"\n\t\t\t\t\t\t\treturn self.callExtend(this, '$main', def, def[lookup + ',...'], arguments);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow('Irrelon Overload: Overloaded method does not have a matching signature for the passed arguments: ' + JSON.stringify(arr));\n\t\t};\n\t}\n\n\treturn function () {};\n};\n\n/**\n * Generates an array of all the different definition signatures that can be\n * created from the passed string with a catch-all wildcard *. E.g. it will\n * convert the signature: string,*,string to all potentials:\n * string,string,string\n * string,number,string\n * string,object,string,\n * string,function,string,\n * string,undefined,string\n *\n * @param {String} str Signature string with a wildcard in it.\n * @returns {Array} An array of signature strings that are generated.\n */\nOverload.prototype.generateSignaturePermutations = function (str) {\n\tvar signatures = [],\n\t\tnewSignature,\n\t\ttypes = ['string', 'object', 'number', 'function', 'undefined'],\n\t\tindex;\n\n\tif (str.indexOf('*') > -1) {\n\t\t// There is at least one \"any\" type, break out into multiple keys\n\t\t// We could do this at query time with regular expressions but\n\t\t// would be significantly slower\n\t\tfor (index = 0; index < types.length; index++) {\n\t\t\tnewSignature = str.replace('*', types[index]);\n\t\t\tsignatures = signatures.concat(this.generateSignaturePermutations(newSignature));\n\t\t}\n\t} else {\n\t\tsignatures.push(str);\n\t}\n\n\treturn signatures;\n};\n\nOverload.prototype.callExtend = function (context, prop, propContext, func, args) {\n\tvar tmp,\n\t\tret;\n\n\tif (context && propContext[prop]) {\n\t\ttmp = context[prop];\n\n\t\tcontext[prop] = propContext[prop];\n\t\tret = func.apply(context, args);\n\t\tcontext[prop] = tmp;\n\n\t\treturn ret;\n\t} else {\n\t\treturn func.apply(context, args);\n\t}\n};\n\nmodule.exports = Overload;\n\n//# sourceURL=webpack:///./node_modules/irrelon-overload/Overload.js?");

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n//# sourceURL=webpack:///./node_modules/object-assign/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar printWarning = function() {};\n\nif (true) {\n  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n  var loggedTypeFailures = {};\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (true) {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          )\n\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n\n\n//# sourceURL=webpack:///./node_modules/prop-types/checkPropTypes.js?");

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n\n\n//# sourceURL=webpack:///./node_modules/prop-types/lib/ReactPropTypesSecret.js?");

/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v16.8.6\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar _assign = __webpack_require__(/*! object-assign */ \"./node_modules/object-assign/index.js\");\nvar checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");\n\n// TODO: this is special because it gets imported during build.\n\nvar ReactVersion = '16.8.6';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\n\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;\n\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function () {};\n\n{\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error = void 0;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\n// Relying on the `invariant()` implementation lets us\n// preserve the format and params in the www builds.\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar lowPriorityWarning = function () {};\n\n{\n  var printWarning = function (format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarning = function (condition, format) {\n    if (format === undefined) {\n      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nvar lowPriorityWarning$1 = lowPriorityWarning;\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warningWithoutStack = function () {};\n\n{\n  warningWithoutStack = function (condition, format) {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if (format === undefined) {\n      throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n    if (args.length > 8) {\n      // Check before the condition to catch violations early.\n      throw new Error('warningWithoutStack() currently supports at most 8 arguments.');\n    }\n    if (condition) {\n      return;\n    }\n    if (typeof console !== 'undefined') {\n      var argsWithFormat = args.map(function (item) {\n        return '' + item;\n      });\n      argsWithFormat.unshift('Warning: ' + format);\n\n      // We intentionally don't use spread (or .apply) directly because it\n      // breaks IE9: https://github.com/facebook/react/issues/13610\n      Function.prototype.apply.call(console.error, console, argsWithFormat);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nvar warningWithoutStack$1 = warningWithoutStack;\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + '.' + callerName;\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n    warningWithoutStack$1(false, \"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar emptyObject = {};\n{\n  Object.freeze(emptyObject);\n}\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nComponent.prototype.setState = function (partialState, callback) {\n  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n        return undefined;\n      }\n    });\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\nComponentDummy.prototype = Component.prototype;\n\n/**\n * Convenience component with default shallow equality check for sCU.\n */\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent;\n// Avoid an extra prototype jump for these methods.\n_assign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n  {\n    Object.seal(refObject);\n  }\n  return refObject;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nvar describeComponentFrame = function (name, source, ownerName) {\n  var sourceInfo = '';\n  if (source) {\n    var path = source.fileName;\n    var fileName = path.replace(BEFORE_SLASH_RE, '');\n    {\n      // In DEV, include code for a common special case:\n      // prefer \"folder/index.js\" instead of just \"index.js\".\n      if (/^index\\./.test(fileName)) {\n        var match = path.match(BEFORE_SLASH_RE);\n        if (match) {\n          var pathBeforeSlash = match[1];\n          if (pathBeforeSlash) {\n            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n            fileName = folderName + '/' + fileName;\n          }\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n};\n\nvar Resolved = 1;\n\n\nfunction refineResolvedLazyComponent(lazyComponent) {\n  return lazyComponent._status === Resolved ? lazyComponent._result : null;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  {\n    if (typeof type.tag === 'number') {\n      warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_CONCURRENT_MODE_TYPE:\n      return 'ConcurrentMode';\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        return 'Context.Consumer';\n      case REACT_PROVIDER_TYPE:\n        return 'Context.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n      case REACT_LAZY_TYPE:\n        {\n          var thenable = type;\n          var resolvedThenable = refineResolvedLazyComponent(thenable);\n          if (resolvedThenable) {\n            return getComponentName(resolvedThenable);\n          }\n        }\n    }\n  }\n  return null;\n}\n\nvar ReactDebugCurrentFrame = {};\n\nvar currentlyValidatingElement = null;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    currentlyValidatingElement = element;\n  }\n}\n\n{\n  // Stack implementation injected by the current renderer.\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = '';\n\n    // Add an extra top frame while an element is being validated\n    if (currentlyValidatingElement) {\n      var name = getComponentName(currentlyValidatingElement.type);\n      var owner = currentlyValidatingElement._owner;\n      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));\n    }\n\n    // Delegate to the injected renderer-specific implementation\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentOwner: ReactCurrentOwner,\n  // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n  assign: _assign\n};\n\n{\n  _assign(ReactSharedInternals, {\n    // These should not be included in production.\n    ReactDebugCurrentFrame: ReactDebugCurrentFrame,\n    // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n    // TODO: remove in React 17.0.\n    ReactComponentTreeHook: {}\n  });\n}\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = warningWithoutStack$1;\n\n{\n  warning = function (condition, format) {\n    if (condition) {\n      return;\n    }\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n    // eslint-disable-next-line react-internal/warning-and-invariant-args\n\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));\n  };\n}\n\nvar warning$1 = warning;\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\n\nvar specialPropKeyWarningShown = void 0;\nvar specialPropRefWarningShown = void 0;\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown = true;\n      warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown = true;\n      warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, no instanceof check\n * will work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} key\n * @param {string|object} ref\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @param {*} owner\n * @param {*} props\n * @internal\n */\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    });\n    // self and source are DEV only properties.\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    });\n    // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\nfunction createElement(type, config, children) {\n  var propName = void 0;\n\n  // Reserved names are extracted\n  var props = {};\n\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\n\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\n\n\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n\n  return newElement;\n}\n\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\nfunction cloneElement(element, config, children) {\n  !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;\n\n  var propName = void 0;\n\n  // Original props are copied\n  var props = _assign({}, element.props);\n\n  // Reserved names are extracted\n  var key = element.key;\n  var ref = element.ref;\n  // Self is preserved since the owner is preserved.\n  var self = element._self;\n  // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n  var source = element._source;\n\n  // Owner will be preserved, unless ref is overridden\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    // Remaining properties override existing props\n    var defaultProps = void 0;\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n\n  return '$' + escapedString;\n}\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar didWarnAboutMaps = false;\n\nvar userProvidedKeyEscapeRegex = /\\/+/g;\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\nvar POOL_SIZE = 10;\nvar traverseContextPool = [];\nfunction getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n  if (traverseContextPool.length) {\n    var traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0\n    };\n  }\n}\n\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n  if (traverseContextPool.length < POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n    }\n  }\n\n  if (invokeCallback) {\n    callback(traverseContext, children,\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child = void 0;\n  var nextName = void 0;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n    if (typeof iteratorFn === 'function') {\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === children.entries) {\n          !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(children);\n      var step = void 0;\n      var ii = 0;\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n      {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();\n      }\n      var childrenString = '' + children;\n      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof component === 'object' && component !== null && component.key != null) {\n    // Explicit key\n    return escape(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func,\n      context = bookKeeping.context;\n\n  func.call(context, child, bookKeeping.count++);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result,\n      keyPrefix = bookKeeping.keyPrefix,\n      func = bookKeeping.func,\n      context = bookKeeping.context;\n\n\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {\n      return c;\n    });\n  } else if (mappedChild != null) {\n    if (isValidElement(mappedChild)) {\n      mappedChild = cloneAndReplaceKey(mappedChild,\n      // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children) {\n  return traverseAllChildren(children, function () {\n    return null;\n  }, null);\n}\n\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {\n    return child;\n  });\n  return result;\n}\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;\n  return children;\n}\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    {\n      !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;\n    }\n  }\n\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits\n    };\n    // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n            warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n            warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n          return context.Consumer;\n        }\n      }\n    });\n    // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nfunction lazy(ctor) {\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _ctor: ctor,\n    // React uses these fields to store the result.\n    _status: -1,\n    _result: null\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps = void 0;\n    var propTypes = void 0;\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n          defaultProps = newDefaultProps;\n          // Match production behavior more closely:\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n          propTypes = newPropTypes;\n          // Match production behavior more closely:\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      !(\n      // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object\n      render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;\n    }\n\n    if (render != null) {\n      !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;\n    }\n  }\n\n  return {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n}\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' ||\n  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n  return {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n  !(dispatcher !== null) ? invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.') : void 0;\n  return dispatcher;\n}\n\nfunction useContext(Context, unstable_observedBits) {\n  var dispatcher = resolveDispatcher();\n  {\n    !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0;\n\n    // TODO: add a more generic warning for invalid values.\n    if (Context._context !== undefined) {\n      var realContext = Context._context;\n      // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n      if (realContext.Consumer === Context) {\n        warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n  return dispatcher.useContext(Context, unstable_observedBits);\n}\n\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\n\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\n\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\n\nfunction useEffect(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, inputs);\n}\n\nfunction useLayoutEffect(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, inputs);\n}\n\nfunction useCallback(callback, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, inputs);\n}\n\nfunction useMemo(create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, inputs);\n}\n\nfunction useImperativeHandle(ref, create, inputs) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, inputs);\n}\n\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\nvar propTypesMisspellWarningShown = void 0;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentName(ReactCurrentOwner.current.type);\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(elementProps) {\n  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {\n    var source = elementProps.__source;\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n  return '';\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n    if (parentName) {\n      info = '\\n\\nCheck the top-level render call using <' + parentName + '>.';\n    }\n  }\n  return info;\n}\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n  element._store.validated = true;\n\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  var childOwner = '';\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';\n  }\n\n  setCurrentlyValidatingElement(element);\n  {\n    warning$1(false, 'Each child in a list should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);\n  }\n  setCurrentlyValidatingElement(null);\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step = void 0;\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  var type = element.type;\n  if (type === null || type === undefined || typeof type === 'string') {\n    return;\n  }\n  var name = getComponentName(type);\n  var propTypes = void 0;\n  if (typeof type === 'function') {\n    propTypes = type.propTypes;\n  } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||\n  // Note: Memo only checks outer props here.\n  // Inner props are checked in the reconciler.\n  type.$$typeof === REACT_MEMO_TYPE)) {\n    propTypes = type.propTypes;\n  } else {\n    return;\n  }\n  if (propTypes) {\n    setCurrentlyValidatingElement(element);\n    checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);\n    setCurrentlyValidatingElement(null);\n  } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n    propTypesMisspellWarningShown = true;\n    warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n  }\n  if (typeof type.getDefaultProps === 'function') {\n    !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;\n  }\n}\n\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\nfunction validateFragmentProps(fragment) {\n  setCurrentlyValidatingElement(fragment);\n\n  var keys = Object.keys(fragment.props);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (key !== 'children' && key !== 'key') {\n      warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n      break;\n    }\n  }\n\n  if (fragment.ref !== null) {\n    warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');\n  }\n\n  setCurrentlyValidatingElement(null);\n}\n\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type);\n\n  // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n  if (!validType) {\n    var info = '';\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendum(props);\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString = void 0;\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n  }\n\n  var element = createElement.apply(this, arguments);\n\n  // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n  if (element == null) {\n    return element;\n  }\n\n  // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\n\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n  // Legacy hook: remove it\n  {\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\n\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n  validatePropTypes(newElement);\n  return newElement;\n}\n\n// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:\n\n\n// In some cases, StrictMode should also double-render lifecycles.\n// This can be confusing for tests though,\n// And it can be bad for performance in production.\n// This feature flag can be used to control the behavior:\n\n\n// To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\n\n\n// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\n\n\n// Gather advanced timing metrics for Profiler subtrees.\n\n\n// Trace which interactions trigger each commit.\n\n\n// Only used in www builds.\n // TODO: true? Here it might just be false.\n\n// Only used in www builds.\n\n\n// Only used in www builds.\n\n\n// React Fire: prevent the value and checked attributes from syncing\n// with their related DOM properties\n\n\n// These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\n// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\nvar enableStableConcurrentModeAPIs = false;\n\nvar React = {\n  Children: {\n    map: mapChildren,\n    forEach: forEachChildren,\n    count: countChildren,\n    toArray: toArray,\n    only: onlyChild\n  },\n\n  createRef: createRef,\n  Component: Component,\n  PureComponent: PureComponent,\n\n  createContext: createContext,\n  forwardRef: forwardRef,\n  lazy: lazy,\n  memo: memo,\n\n  useCallback: useCallback,\n  useContext: useContext,\n  useEffect: useEffect,\n  useImperativeHandle: useImperativeHandle,\n  useDebugValue: useDebugValue,\n  useLayoutEffect: useLayoutEffect,\n  useMemo: useMemo,\n  useReducer: useReducer,\n  useRef: useRef,\n  useState: useState,\n\n  Fragment: REACT_FRAGMENT_TYPE,\n  StrictMode: REACT_STRICT_MODE_TYPE,\n  Suspense: REACT_SUSPENSE_TYPE,\n\n  createElement: createElementWithValidation,\n  cloneElement: cloneElementWithValidation,\n  createFactory: createFactoryWithValidation,\n  isValidElement: isValidElement,\n\n  version: ReactVersion,\n\n  unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,\n  unstable_Profiler: REACT_PROFILER_TYPE,\n\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals\n};\n\n// Note: some APIs are added with feature flags.\n// Make sure that stable builds for open source\n// don't modify the React object to avoid deopts.\n// Also let's not expose their names in stable builds.\n\nif (enableStableConcurrentModeAPIs) {\n  React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\n  React.Profiler = REACT_PROFILER_TYPE;\n  React.unstable_ConcurrentMode = undefined;\n  React.unstable_Profiler = undefined;\n}\n\n\n\nvar React$2 = Object.freeze({\n\tdefault: React\n});\n\nvar React$3 = ( React$2 && React ) || React$2;\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\nvar react = React$3.default || React$3;\n\nmodule.exports = react;\n  })();\n}\n\n\n//# sourceURL=webpack:///./node_modules/react/cjs/react.development.js?");

/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ \"./node_modules/react/cjs/react.development.js\");\n}\n\n\n//# sourceURL=webpack:///./node_modules/react/index.js?");

/***/ }),

/***/ "./src/Context.js":
/*!************************!*\
  !*** ./src/Context.js ***!
  \************************/
/*! exports provided: NextStateStoreContext, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NextStateStoreContext\", function() { return NextStateStoreContext; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst NextStateStoreContext = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(null);\n/* harmony default export */ __webpack_exports__[\"default\"] = (NextStateStoreContext);\n\n//# sourceURL=webpack:///./src/Context.js?");

/***/ }),

/***/ "./src/StateController.js":
/*!********************************!*\
  !*** ./src/StateController.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var irrelon_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! irrelon-emitter */ \"./node_modules/irrelon-emitter/lib/Emitter.js\");\n/* harmony import */ var irrelon_emitter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(irrelon_emitter__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\nconst {\n  \"get\": pathGet\n} = __webpack_require__(/*! irrelon-path */ \"../irrelon-path/src/Path.js\");\n\nconst stateStore = __webpack_require__(/*! ./stateStore */ \"./src/stateStore.js\");\n/**\n * The StateController class manages states including their data\n * and mutations.\n */\n\n\nclass StateController {\n  constructor(data, options) {\n    if (!options) {\n      throw new Error(\"You must provide a unique name for each state controller you instantiate!\");\n    }\n\n    if (typeof options === \"string\") {\n      // User passed the name directly rather than as an object\n      options = {\n        \"name\": options\n      };\n    }\n\n    this.name(options.name);\n    this.debug(options.debug);\n    this.context(react__WEBPACK_IMPORTED_MODULE_2___default.a.createContext(data));\n    stateStore.registerStateController(options.name, this);\n    stateStore.setState(options.name, Object(_utils__WEBPACK_IMPORTED_MODULE_1__[\"decouple\"])(data));\n  }\n\n  context(val) {\n    if (val !== undefined) {\n      this._context = val;\n      return this;\n    }\n\n    return this._context;\n  }\n\n  name(val) {\n    if (val !== undefined) {\n      this._name = val;\n      return this;\n    }\n\n    return this._name;\n  }\n\n  debugLog(msg) {\n    if (this._debug) {\n      console.log(`NextState StateController :: ${this.name() || \"Unnamed\"} :: ${msg}`);\n    }\n  }\n\n  debug(val) {\n    if (val !== undefined) {\n      this._debug = val;\n      return this;\n    }\n\n    return this._debug;\n  }\n\n  update(data) {\n    this.debugLog(`(update) Asking to update state with ${JSON.stringify(data)}`);\n    const name = this.name();\n    const currentState = stateStore.getState(name);\n\n    if (Object.is(currentState, data)) {\n      return;\n    }\n\n    this.debugLog(`(update) Updating state with ${JSON.stringify(data)}`);\n\n    if (typeof currentState === \"object\" && typeof data === \"object\") {\n      // Mixin existing data\n      this.debugLog(`(update) Spreading ${JSON.stringify(data)}`);\n      stateStore.setState(name, _objectSpread({}, currentState, Object(_utils__WEBPACK_IMPORTED_MODULE_1__[\"decouple\"])(data)));\n    } else {\n      this.debugLog(`(update) Assigning ${JSON.stringify(data)}`);\n      stateStore.setState(name, data);\n    }\n\n    this.debugLog(`(update) Update completed, new data ${JSON.stringify(stateStore.getState(name))}`);\n    this.debugLog(`(update) Emitting state change...`);\n    this.emit(\"change\");\n  }\n\n  overwrite(data) {\n    const name = this.name();\n    const currentState = stateStore.getState(name);\n\n    if (Object.is(currentState, data)) {\n      return;\n    }\n\n    if (typeof data === \"object\") {\n      stateStore.setState(name, _objectSpread({}, Object(_utils__WEBPACK_IMPORTED_MODULE_1__[\"decouple\"])(data)));\n    } else {\n      stateStore.setState(name, data);\n    }\n\n    this.emit(\"change\");\n  }\n\n  value() {\n    return stateStore.getState(this.name());\n  }\n\n  find(query, options) {\n    return stateStore.getState(this.name());\n  }\n\n  get(path) {\n    const currentState = stateStore.getState(this.name());\n    return pathGet(currentState, path);\n  }\n\n} // Give StateController's prototype the event emitter methods\n// and functionality\n\n\nirrelon_emitter__WEBPACK_IMPORTED_MODULE_0___default()(StateController);\n/* harmony default export */ __webpack_exports__[\"default\"] = (StateController);\n\n//# sourceURL=webpack:///./src/StateController.js?");

/***/ }),

/***/ "./src/StateController2.js":
/*!*********************************!*\
  !*** ./src/StateController2.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var irrelon_emitter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! irrelon-emitter */ \"./node_modules/irrelon-emitter/lib/Emitter.js\");\n/* harmony import */ var irrelon_emitter__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(irrelon_emitter__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nclass StateController2 {\n  constructor(initialData, options) {\n    this._context = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext(initialData);\n  }\n\n  update(data) {}\n\n  value() {\n    return {};\n  }\n\n  context() {\n    return this._context;\n  }\n\n}\n\nirrelon_emitter__WEBPACK_IMPORTED_MODULE_1___default()(StateController2);\n/* harmony default export */ __webpack_exports__[\"default\"] = (StateController2);\n\n//# sourceURL=webpack:///./src/StateController2.js?");

/***/ }),

/***/ "./src/StoreProvider.js":
/*!******************************!*\
  !*** ./src/StoreProvider.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Context */ \"./src/Context.js\");\n\n\n\nclass StoreProvider extends react__WEBPACK_IMPORTED_MODULE_0__[\"Component\"] {\n  constructor(props) {\n    super(props);\n    const {\n      data\n    } = props;\n    this.state = {\n      data\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.setState({\n        \"data\": this.props.data\n      });\n    }\n  }\n\n  render() {\n    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Context__WEBPACK_IMPORTED_MODULE_1__[\"NextStateStoreContext\"].Provider, {\n      value: this.state.data\n    }, this.props.children);\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (StoreProvider);\n\n//# sourceURL=webpack:///./src/StoreProvider.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: StateController, StateController2, StoreProvider, useProps, mapToStateData, withNextState */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"mapToStateData\", function() { return _utils__WEBPACK_IMPORTED_MODULE_0__[\"mapToStateData\"]; });\n\n/* harmony import */ var _StateController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StateController */ \"./src/StateController.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"StateController\", function() { return _StateController__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _StateController2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StateController2 */ \"./src/StateController2.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"StateController2\", function() { return _StateController2__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _StoreProvider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StoreProvider */ \"./src/StoreProvider.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"StoreProvider\", function() { return _StoreProvider__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _useProps__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useProps */ \"./src/useProps.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"useProps\", function() { return _useProps__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _withNextState__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./withNextState */ \"./src/withNextState.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"withNextState\", function() { return _withNextState__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/**\n * Irrelon NextState - A high performance very lightweight react-based state management library.\n * Copyright 2019 - Irrelon Software Limited\n *\n * MIT license.\n */\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/stateStore.js":
/*!***************************!*\
  !*** ./src/stateStore.js ***!
  \***************************/
/*! exports provided: getStore, getState, setState, registerStateController, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getStore\", function() { return getStore; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getState\", function() { return getState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setState\", function() { return setState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registerStateController\", function() { return registerStateController; });\n/* harmony import */ var irrelon_emitter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! irrelon-emitter */ \"./node_modules/irrelon-emitter/lib/Emitter.js\");\n/* harmony import */ var irrelon_emitter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(irrelon_emitter__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nconst isServer = typeof window === \"undefined\";\nconst controllers = {};\n\nclass Store {\n  constructor(initialState) {\n    this._state = initialState;\n  }\n\n  getState() {\n    return this._state;\n  }\n\n  getNamedState(name) {\n    return this._state[name];\n  }\n\n  setState(newState) {\n    this._state = newState;\n    this.emit(\"change\");\n  }\n\n  updateNamedState(name, val) {\n    this.setState(_objectSpread({}, this._state, {\n      [name]: val\n    }));\n  }\n\n}\n\nirrelon_emitter__WEBPACK_IMPORTED_MODULE_0___default()(Store);\nlet store;\n\nconst getStore = initialState => {\n  if (isServer) {\n    console.log(\"On server, init new store\"); // On the server we always want to return a brand new store object\n    // otherwise we end up sharing and interfering with other server\n    // requests and that would be very bad!\n\n    store = new Store(initialState !== undefined ? Object(_utils__WEBPACK_IMPORTED_MODULE_1__[\"decouple\"])(initialState) : {});\n    return store;\n  }\n\n  console.log(\"On client, use existing store\");\n  store = store || new Store(initialState);\n  return store;\n};\n\nconst registerStateController = (stateName, controllerInstance) => {\n  console.log(\"Registered state controller\", stateName);\n  controllers[stateName] = controllerInstance;\n};\n\nconst getState = name => {\n  return store.getNamedState(name);\n};\n\nconst setState = (name, val) => {\n  store.updateNamedState(name, val);\n};\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  getStore,\n  getState,\n  setState,\n  registerStateController\n});\n\n//# sourceURL=webpack:///./src/stateStore.js?");

/***/ }),

/***/ "./src/useProps.js":
/*!*************************!*\
  !*** ./src/useProps.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(process) {/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ \"./src/utils.js\");\n/* harmony import */ var _Context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Context */ \"./src/Context.js\");\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n/**\n * Wraps the given component in a HOC that controls the props for the wrapped\n * component based on the stateControllerMap object passed in.\n * @param {Object} stateControllerMap The object containing the key value pairs\n * used to create props on the wrapped component. Each key becomes the prop name\n * used to access the value (state controller) data.\n * @param {React.Component} ComponentToWrap The react component to wrap in this\n * HOC so that it will receive new props when state data changes.\n * @param {Object=} options An options object used to set flags like debug.\n * @returns {React.PureComponent} The new HOC.\n */\n\nconst useProps = (stateControllerMap, ComponentToWrap, options = {\n  \"debug\": false\n}) => {\n  class IrrelonNextStateHOC extends react__WEBPACK_IMPORTED_MODULE_0___default.a.PureComponent {\n    static getInitialProps(ctx) {\n      if (ComponentToWrap.getInitialProps) {\n        return ComponentToWrap.getInitialProps(ctx).then(dataProps => {\n          if (options.debug) {\n            console.log(`NextState useProps :: (getInitialProps) Asking to map state controller data to props...`);\n          }\n\n          return _objectSpread({}, dataProps, Object(_utils__WEBPACK_IMPORTED_MODULE_1__[\"mapToStateData\"])(stateControllerMap));\n        });\n      } else {\n        if (options.debug) {\n          console.log(`NextState useProps :: (getInitialProps) ComponentToWrap has no getIntialProps, asking to map state controller data to props...`);\n        }\n\n        return Object(_utils__WEBPACK_IMPORTED_MODULE_1__[\"mapToStateData\"])(stateControllerMap);\n      }\n    }\n\n    constructor(props) {\n      super(props);\n      this.debugLog(`(constructor) *${this.props.debugTag || this.constructor.displayName}* Asking to map state controller data to props...`);\n      this._changeHandlers = this._changeHandlers || {};\n      this.state = _objectSpread({}, Object(_utils__WEBPACK_IMPORTED_MODULE_1__[\"mapToStateData\"])(stateControllerMap, this.props));\n      this.debugLog(`(constructor) *${this.props.debugTag || this.constructor.displayName}* Initial component internal state`, this.state); // Only hook changes client-side\n\n      if (!process || !process.browser) {\n        this.debugLog(`(constructor) *${this.props.debugTag || this.constructor.displayName}* Event listeners not generated because we are running server-side`);\n        return;\n      }\n\n      this.debugLog(`(constructor) *${this.props.debugTag || this.constructor.displayName}* Generating state event listeners...`);\n      Object.keys(stateControllerMap).forEach(key => {\n        const stateController = stateControllerMap[key];\n        this._changeHandlers[key] = this.generateHandleChangeByKey(this, key, stateController);\n        stateController.debugLog(`(constructor) *${this.props.debugTag || this.constructor.displayName}* Hooking state change event for prop \"${key}\" in \"${stateController.name()}\"`);\n        stateController.on(\"change\", this._changeHandlers[key]);\n      });\n    }\n\n    debugLog(msg) {\n      if (options.debug) {\n        console.log(`NextState useProps :: ${msg}`);\n      }\n    }\n\n    componentWillUnmount() {\n      // Only un-hook changes client-side\n      if (!process || !process.browser) {\n        return;\n      }\n\n      Object.keys(stateControllerMap).forEach(key => {\n        const changeHandler = this._changeHandlers[key];\n        const stateController = stateControllerMap[key];\n        stateControllerMap[key].debugLog(`(componentWillUnmount) *${this.props.debugTag || this.constructor.displayName}* Unhooking state change event for prop \"${key}\" in \"${stateController.name()}\"`);\n        stateControllerMap[key].off(\"change\", changeHandler);\n      });\n    }\n\n    generateHandleChangeByKey(componentInstance, key, stateController) {\n      stateController.debugLog(`(generateHandleChangeByKey) *${componentInstance.props.debugTag || componentInstance.constructor.displayName}* Generating state change event handler for prop \"${key} in \"${stateController.name()}\"`);\n      return function changeHandler() {\n        stateController.debugLog(`(changeHandler) *${componentInstance.props.debugTag || componentInstance.constructor.displayName}* Updating prop \"${key}\" to ${JSON.stringify(stateController.value())}`);\n        componentInstance.setState({\n          [key]: stateController.value()\n        });\n      };\n    }\n\n    render() {\n      const _this$props = this.props,\n            {\n        forwardedRef\n      } = _this$props,\n            otherProps = _objectWithoutProperties(_this$props, [\"forwardedRef\"]);\n\n      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Context__WEBPACK_IMPORTED_MODULE_2__[\"NextStateStoreContext\"].Provider, {\n        value: this.state\n      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_Context__WEBPACK_IMPORTED_MODULE_2__[\"NextStateStoreContext\"].Consumer, null, consumerStateData => {\n        console.log(\"Updating consumer data...\", consumerStateData);\n        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ComponentToWrap, _extends({\n          ref: forwardedRef\n        }, otherProps, consumerStateData));\n      }));\n    }\n\n  }\n\n  IrrelonNextStateHOC.displayName = `IrrelonNextStateHOC(${Object(_utils__WEBPACK_IMPORTED_MODULE_1__[\"getDisplayName\"])(ComponentToWrap)})`;\n  return IrrelonNextStateHOC;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (useProps);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./src/useProps.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/*! exports provided: mapToStateData, getDisplayName, decouple */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapToStateData\", function() { return mapToStateData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getDisplayName\", function() { return getDisplayName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"decouple\", function() { return decouple; });\nconst mapToStateData = (obj, overrides = {}, debugLog) => {\n  return Object.keys(obj).reduce((acc, key) => {\n    acc[key] = overrides[key] || obj[key].value();\n    obj[key].debugLog(`(mapToStateData) Mapping \"${key}\" to value ${JSON.stringify(acc[key])}`);\n    return acc;\n  }, {});\n};\n\nconst getDisplayName = WrappedComponent => {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n};\n\nconst decouple = data => {\n  if (typeof data !== \"object\") {\n    return data;\n  }\n\n  return JSON.parse(JSON.stringify(data));\n};\n\n\n\n//# sourceURL=webpack:///./src/utils.js?");

/***/ }),

/***/ "./src/withNextState.js":
/*!******************************!*\
  !*** ./src/withNextState.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _stateStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stateStore */ \"./src/stateStore.js\");\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (App => {\n  return class AppWithNextState extends react__WEBPACK_IMPORTED_MODULE_0___default.a.Component {\n    static async getInitialProps(appContext) {\n      const store = _stateStore__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStore();\n      console.log(\"getInitialProps: The store state is\", store.getState()); // Provide the store to getInitialProps of pages\n\n      appContext.ctx.store = store;\n      let appProps = {};\n\n      if (typeof App.getInitialProps === \"function\") {\n        appProps = await App.getInitialProps(appContext);\n      }\n\n      return _objectSpread({}, appProps, {\n        \"initialNextStateStore\": store.getState()\n      });\n    }\n\n    constructor(props) {\n      super(props);\n      this.store = _stateStore__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getStore(props.initialNextStateStore);\n      this.state = this.store.getState();\n      console.log(\"constructor: The store state is\", this.state);\n\n      this.handleChange = () => {\n        this.setState(this.store.getState());\n      };\n\n      this.store.on(\"change\", this.handleChange);\n    }\n\n    componentWillUnmount() {\n      this.store.off(\"change\", this.handleChange);\n    }\n\n    render() {\n      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(App, _extends({}, this.props, {\n        nextStateData: this.state\n      }));\n    }\n\n  };\n});\n\n//# sourceURL=webpack:///./src/withNextState.js?");

/***/ })

/******/ })));